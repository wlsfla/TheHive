# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

GET      /                                        controllers.Home.redirect
GET      /api/status                              controllers.StatusCtrl.get
GET      /api/health                              controllers.StatusCtrl.health
GET      /api/logout                              controllers.AuthenticationCtrl.logout()
POST     /api/login                               controllers.AuthenticationCtrl.login()
POST     /api/ssoLogin                            controllers.AuthenticationCtrl.ssoLogin()

POST     /api/_search                             controllers.SearchCtrl.find()
POST     /api/_stats                              controllers.SearchCtrl.stats()

GET      /api/case                                controllers.CaseCtrl.find()
POST     /api/case/_search                        controllers.CaseCtrl.find()
PATCH    /api/case/_bulk                          controllers.CaseCtrl.bulkUpdate()
POST     /api/case/_stats                         controllers.CaseCtrl.stats()
POST     /api/case                                controllers.CaseCtrl.create()
GET      /api/case/:caseId                        controllers.CaseCtrl.get(caseId)
PATCH    /api/case/:caseId                        controllers.CaseCtrl.update(caseId)
DELETE   /api/case/:caseId                        controllers.CaseCtrl.delete(caseId)
DELETE   /api/case/:caseId/force                  controllers.CaseCtrl.realDelete(caseId)
GET      /api/case/:caseId/links                  controllers.CaseCtrl.linkedCases(caseId)
POST     /api/case/:caseId1/_merge/:caseId2       controllers.CaseCtrl.merge(caseId1, caseId2)

POST     /api/case/template/_search               controllers.CaseTemplateCtrl.find()
POST     /api/case/template                       controllers.CaseTemplateCtrl.create()
GET      /api/case/template/:caseTemplateId       controllers.CaseTemplateCtrl.get(caseTemplateId)
PATCH    /api/case/template/:caseTemplateId       controllers.CaseTemplateCtrl.update(caseTemplateId)
DELETE   /api/case/template/:caseTemplateId       controllers.CaseTemplateCtrl.delete(caseTemplateId)

POST     /api/case/artifact/_search               controllers.ArtifactCtrl.find()
POST     /api/case/:caseId/artifact/_search       controllers.ArtifactCtrl.findInCase(caseId)
POST     /api/case/artifact/_stats                controllers.ArtifactCtrl.stats()
POST     /api/case/:caseId/artifact               controllers.ArtifactCtrl.create(caseId)
GET      /api/case/artifact/:artifactId           controllers.ArtifactCtrl.get(artifactId)
DELETE   /api/case/artifact/:artifactId           controllers.ArtifactCtrl.delete(artifactId)
PATCH    /api/case/artifact/_bulk                 controllers.ArtifactCtrl.bulkUpdate()
PATCH    /api/case/artifact/:artifactId           controllers.ArtifactCtrl.update(artifactId)
GET      /api/case/artifact/:artifactId/similar   controllers.ArtifactCtrl.findSimilar(artifactId)

POST     /api/case/:caseId/task/_search           controllers.TaskCtrl.findInCase(caseId)
POST     /api/case/task/_search                   controllers.TaskCtrl.find()
POST     /api/case/task/_stats                    controllers.TaskCtrl.stats()
GET      /api/case/task/:taskId                   controllers.TaskCtrl.get(taskId)
PATCH    /api/case/task/:taskId                   controllers.TaskCtrl.update(taskId)
POST     /api/case/:caseId/task                   controllers.TaskCtrl.create(caseId)

GET      /api/case/task/:taskId/log               controllers.LogCtrl.findInTask(taskId)
POST     /api/case/task/:taskId/log/_search       controllers.LogCtrl.findInTask(taskId)
POST     /api/case/task/log/_search               controllers.LogCtrl.find()
POST     /api/case/task/log/_stats                controllers.LogCtrl.stats()
POST     /api/case/task/:taskId/log               controllers.LogCtrl.create(taskId)
PATCH    /api/case/task/log/:logId                controllers.LogCtrl.update(logId)
DELETE   /api/case/task/log/:logId                controllers.LogCtrl.delete(logId)
GET      /api/case/task/log/:logId                controllers.LogCtrl.get(logId)

GET      /api/alert                               controllers.AlertCtrl.find()
POST     /api/alert/_search                       controllers.AlertCtrl.find()
PATCH    /api/alert/_bulk                         controllers.AlertCtrl.bulkUpdate()
POST     /api/alert/_stats                        controllers.AlertCtrl.stats()
GET      /api/alert/_fixStatus                    controllers.AlertCtrl.fixStatus()
POST     /api/alert                               controllers.AlertCtrl.create()
GET      /api/alert/:alertId                      controllers.AlertCtrl.get(alertId)
PATCH    /api/alert/:alertId                      controllers.AlertCtrl.update(alertId)
DELETE   /api/alert/:alertId                      controllers.AlertCtrl.delete(alertId)
POST     /api/alert/:alertId/markAsRead           controllers.AlertCtrl.markAsRead(alertId)
POST     /api/alert/:alertId/markAsUnread         controllers.AlertCtrl.markAsUnread(alertId)
POST     /api/alert/:alertId/createCase           controllers.AlertCtrl.createCase(alertId)
POST     /api/alert/:alertId/follow               controllers.AlertCtrl.followAlert(alertId)
POST     /api/alert/:alertId/unfollow             controllers.AlertCtrl.unfollowAlert(alertId)
POST     /api/alert/:alertId/merge/:caseId        controllers.AlertCtrl.mergeWithCase(alertId, caseId)

GET      /api/flow                                controllers.AuditCtrl.flow(rootId: Option[String], count: Option[Int])
GET      /api/audit                               controllers.AuditCtrl.find()
POST     /api/audit/_search                       controllers.AuditCtrl.find()
POST     /api/audit/_stats                        controllers.AuditCtrl.stats()

GET      /api/datastore/:hash                     controllers.AttachmentCtrl.download(hash, name: Option[String])
GET      /api/datastorezip/:hash                  controllers.AttachmentCtrl.downloadZip(hash, name: Option[String])

POST     /api/maintenance/migrate                 org.elastic4play.controllers.MigrationCtrl.migrate
#POST          /api/maintenance/rehash                         controllers.MaintenanceCtrl.reHash

GET      /api/list                                org.elastic4play.controllers.DBListCtrl.list()
DELETE   /api/list/:itemId                        org.elastic4play.controllers.DBListCtrl.deleteItem(itemId)
PATCH    /api/list/:itemId                        org.elastic4play.controllers.DBListCtrl.updateItem(itemId)
POST     /api/list/:listName                      org.elastic4play.controllers.DBListCtrl.addItem(listName)
GET      /api/list/:listName                      org.elastic4play.controllers.DBListCtrl.listItems(listName)
POST     /api/list/:listName/_exists              org.elastic4play.controllers.DBListCtrl.itemExists(listName)


GET      /api/user/current                        controllers.UserCtrl.currentUser()
POST     /api/user/_search                        controllers.UserCtrl.find()
POST     /api/user                                controllers.UserCtrl.create()
GET      /api/user/:userId                        controllers.UserCtrl.get(userId)
DELETE   /api/user/:userId                        controllers.UserCtrl.delete(userId)
PATCH    /api/user/:userId                        controllers.UserCtrl.update(userId)
POST     /api/user/:userId/password/set           controllers.UserCtrl.setPassword(userId)
POST     /api/user/:userId/password/change        controllers.UserCtrl.changePassword(userId)
GET      /api/user/:userId/key                    controllers.UserCtrl.getKey(userId)
DELETE   /api/user/:userId/key                    controllers.UserCtrl.removeKey(userId)
POST     /api/user/:userId/key/renew              controllers.UserCtrl.renewKey(userId)


POST     /api/stream                              controllers.StreamCtrl.create()
GET      /api/stream/status                       controllers.StreamCtrl.status
GET      /api/stream/:streamId                    controllers.StreamCtrl.get(streamId)

GET      /api/describe/_all                       controllers.DescribeCtrl.describeAll
GET      /api/describe/:modelName                 controllers.DescribeCtrl.describe(modelName)

GET      /api/dashboard                           controllers.DashboardCtrl.find()
POST     /api/dashboard/_search                   controllers.DashboardCtrl.find()
POST     /api/dashboard/_stats                    controllers.DashboardCtrl.stats()
POST     /api/dashboard                           controllers.DashboardCtrl.create()
GET      /api/dashboard/:dashboardId              controllers.DashboardCtrl.get(dashboardId)
PATCH    /api/dashboard/:dashboardId              controllers.DashboardCtrl.update(dashboardId)
DELETE   /api/dashboard/:dashboardId              controllers.DashboardCtrl.delete(dashboardId)

->       /api/connector                           connectors.ConnectorRouter

GET      /*file                                   controllers.AssetCtrl.get(file)
